/* Generated By:JavaCC: Do not edit this line. PlaceGrammar.java */
package epclaim.compiler.grammar;
import epclaim.compiler.*;
import epclaim.utils.*;
import java.util.ArrayList;
import epclaim.tasks.*;
public class PlaceGrammar implements PlaceGrammarConstants {

  final public PlaceObjectCollection compile() throws ParseException {
  PlaceObjectCollection data = new PlaceObjectCollection();
  Token token;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFINE_AGENT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(DEFINE_AGENT);
      token = jj_consume_token(NAME);
      Agent agent = new Agent(token.image);
      jj_consume_token(OCBRA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AGENT_IN:
        jj_consume_token(AGENT_IN);
        jj_consume_token(EQUAL);
        jj_consume_token(OCBRA);
        token = jj_consume_token(NAME);
        jj_consume_token(CCBRA);
        agent.setAgent_in(token.image);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KNOWLEDGE:
        jj_consume_token(KNOWLEDGE);
        jj_consume_token(EQUAL);
        jj_consume_token(OCBRA);
              KnowledgeCollection  kb = this.getKnowledgeCollection();
              agent.setKnowledgeCollection(kb);
        jj_consume_token(CCBRA);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GOALS:
        jj_consume_token(GOALS);
        jj_consume_token(EQUAL);
        jj_consume_token(OCBRA);
              KnowledgeCollection  kb = this.getKnowledgeCollection();
              agent.setGoalCollection(kb);
        jj_consume_token(CCBRA);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACTIONS:
        jj_consume_token(ACTIONS);
        jj_consume_token(EQUAL);
        jj_consume_token(OCBRA);
              ActionCollection  ac = this.getActionCollection();
              agent.setActionCollection(ac);
        jj_consume_token(CCBRA);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ACTIVITIES:
        jj_consume_token(ACTIVITIES);
        jj_consume_token(EQUAL);
        jj_consume_token(OCBRA);
              ActivityCollection  ac = this.getActivityCollection();
              agent.setActivityCollection(ac);
        jj_consume_token(CCBRA);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(CCBRA);
      data.putAgent(agent.getName(),agent);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFINE_ENVIRONMENT:
      jj_consume_token(DEFINE_ENVIRONMENT);
      token = jj_consume_token(NAME);
      jj_consume_token(OCBRA);
          Environment env = getEnvironmentDetails(token.image);
          data.setEnvironment(env);
      jj_consume_token(CCBRA);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(0);
      {if (true) return data;}
    throw new Error("Missing return statement in function");
  }

  final private Environment getEnvironmentDetails(String envName) throws ParseException {
  Environment env = new Environment(envName);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KNOWLEDGE:
      jj_consume_token(KNOWLEDGE);
      jj_consume_token(EQUAL);
      jj_consume_token(OCBRA);
      KnowledgeCollection  kb = this.getKnowledgeCollection();
      env.setGlobalKnowledgeCollection(kb);
      jj_consume_token(CCBRA);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARTIFACTS:
      jj_consume_token(ARTIFACTS);
      jj_consume_token(EQUAL);
      jj_consume_token(OCBRA);
    env = this.addArtifact(env);
      jj_consume_token(CCBRA);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    {if (true) return env;}
    throw new Error("Missing return statement in function");
  }

  final private ActionCollection getActionCollection() throws ParseException {
  ActionCollection actionCollection = new ActionCollection();
  Token token;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_2;
      }
      token = jj_consume_token(NAME);
      jj_consume_token(OCBRA);
          actionCollection.add(this.getAction(token.image));
      jj_consume_token(CCBRA);
    }
    {if (true) return actionCollection;}
    throw new Error("Missing return statement in function");
  }

  final private ActivityCollection getActivityCollection() throws ParseException {
  ActivityCollection activityCollection = new ActivityCollection();
  Token token;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      token = jj_consume_token(NAME);
      jj_consume_token(OCBRA);
          activityCollection.add(this.getActivity(token.image));
      jj_consume_token(CCBRA);
    }
    {if (true) return activityCollection;}
    throw new Error("Missing return statement in function");
  }

  final private Action getAction(String actionName) throws ParseException {
  Token token;
  Action action = new Action(actionName);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MESSAGE:
      jj_consume_token(MESSAGE);
      jj_consume_token(EQUAL);
  action.setMessage(getFunctionSignature());
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONDITION:
      jj_consume_token(CONDITION);
      jj_consume_token(EQUAL);
      //activity = (Activity)this.setActionConditions(activity);
      action.setCondition(this.getCondition());
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD_EFFECT:
      jj_consume_token(ADD_EFFECT);
      jj_consume_token(EQUAL);
                             action = this.getEffectsForAction(action,1);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELETE_EFFECT:
      jj_consume_token(DELETE_EFFECT);
      jj_consume_token(EQUAL);
                             action = this.getEffectsForAction(action,0);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DURATION:
      jj_consume_token(DURATION);
      jj_consume_token(EQUAL);
      token = jj_consume_token(CONSTANT);
      jj_consume_token(SEMICOLON);
      action.setDuration(Integer.parseInt(token.image));
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    {if (true) return action;}
    throw new Error("Missing return statement in function");
  }

  final private Action getEffectsForAction(Action action,int isAdd) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      jj_consume_token(NULL);
      jj_consume_token(SEMICOLON);
      {if (true) return action;}
      break;
    case OCBRA:
      jj_consume_token(OCBRA);
                      if(isAdd==1)
                      action.addAddEffect(this.getFunctionSignature());
                      else action.addDeleteEffect(this.getFunctionSignature());
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
                      if(isAdd==1)
                      action.addAddEffect(this.getFunctionSignature());
                      else action.addDeleteEffect(this.getFunctionSignature());
      }
      jj_consume_token(CCBRA);
                    {if (true) return action;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Activity getActivity(String actionName) throws ParseException {
  Token token;
  Activity activity = new Activity(actionName);
    jj_consume_token(MESSAGE);
    jj_consume_token(EQUAL);
                  activity.setMessage(getFunctionSignature());
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONDITION:
      jj_consume_token(CONDITION);
      jj_consume_token(EQUAL);
      //activity = (Activity)this.setActionConditions(activity);
      activity.setCondition(this.getCondition());
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO:
      jj_consume_token(DO);
      jj_consume_token(OCBRA);
                  activity = this.setActivityDo(activity);
      jj_consume_token(CCBRA);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EFFECTS:
      jj_consume_token(EFFECTS);
      jj_consume_token(EQUAL);
                  activity = (Activity)this.setActionConditions(activity);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    {if (true) return activity;}
    throw new Error("Missing return statement in function");
  }

  final private Activity setActivityDo(Activity activity) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNORDERED:
      jj_consume_token(UNORDERED);
      activity.setOrdered(false);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBRA:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_5;
      }
      jj_consume_token(OBRA);
      activity.addDoCall(this.getFunctionSignature());
      jj_consume_token(CBRA);
    }
    {if (true) return activity;}
    throw new Error("Missing return statement in function");
  }

  final private Action setActionDo(Action action) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNORDERED:
      jj_consume_token(UNORDERED);
      jj_consume_token(OBRA);
        action = this.setActionDoElement(action);
        action.setActionType(ActionType.UNORDERED);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_6;
        }
        jj_consume_token(DOT);
        action = this.setActionDoElement(action);
        action.setActionType(ActionType.UNORDERED);
      }
      jj_consume_token(CBRA);
      break;
    default:
      jj_la1[25] = jj_gen;
        action = this.setActionDoElement(action);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_7;
        }
        jj_consume_token(DOT);
        action = this.setActionDoElement(action);
      }
    }
    {if (true) return action;}
    throw new Error("Missing return statement in function");
  }

  final private Action setActionDoElement(Action action) throws ParseException {
  Token token;
  Token telltoken;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEND:
    case NEWAGENT:
    case REMOVEKNOWLEDGE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REMOVEKNOWLEDGE:
        jj_consume_token(REMOVEKNOWLEDGE);
        jj_consume_token(OBRA);

        jj_consume_token(CBRA);
        break;
      case SEND:
        jj_consume_token(SEND);
        jj_consume_token(OBRA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case THIS:
          token = jj_consume_token(THIS);
          break;
        case QUESTION:
          jj_consume_token(QUESTION);
          token = jj_consume_token(NAME);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(COMMA);
                  Send sendTask;

                   sendTask = new Send(null,MessageType.TELL,token.image);
                   sendTask = this.getSendTask(sendTask);
                  //action.addTask(sendTask);

        jj_consume_token(CBRA);
        break;
      case NEWAGENT:
        jj_consume_token(NEWAGENT);
        jj_consume_token(OBRA);
        jj_consume_token(QUESTION);
        token = jj_consume_token(NAME);
        jj_consume_token(CBRA);

        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    {if (true) return action;}
    throw new Error("Missing return statement in function");
  }

  final private Send getSendTask(Send st) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TELL:
      jj_consume_token(TELL);
      jj_consume_token(OBRA);
          st.setType(MessageType.TELL);
        st.setFunctionSignature(this.getFunctionSignature());
      jj_consume_token(CBRA);
      break;
    default:
      jj_la1[29] = jj_gen;
        st.setType(MessageType.OTHER);
        st.setFunctionSignature(this.getFunctionSignature());
    }
    {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final private FunctionSignature getFunctionSignature() throws ParseException {
  FunctionSignature fs = new FunctionSignature();
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      token = jj_consume_token(NAME);
      break;
    case AGENT_IN:
      token = jj_consume_token(AGENT_IN);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(OBRA);
                  fs.setName(token.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
    case NAME:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        token = jj_consume_token(VARIABLE);
        break;
      case NAME:
        token = jj_consume_token(NAME);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                      fs.addVariable(token.image);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIABLE:
          token = jj_consume_token(VARIABLE);
          break;
        case NAME:
          token = jj_consume_token(NAME);
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                      fs.addVariable(token.image);
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    jj_consume_token(CBRA);
    {if (true) return fs;}
    throw new Error("Missing return statement in function");
  }

  final private String getVariable() throws ParseException {
  String variable = "";
  Token token;
    jj_consume_token(QUESTION);
    token = jj_consume_token(NAME);
      variable  = token.image;
    {if (true) return variable;}
    throw new Error("Missing return statement in function");
  }

  final private Condition getCondition() throws ParseException {
  Condition condition = new Condition();
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      jj_consume_token(NULL);
      break;
    case HASKNOWLEDGE:
      jj_consume_token(HASKNOWLEDGE);
      jj_consume_token(OBRA);
          condition.addCondition(this.getFunctionSignature());
      jj_consume_token(CBRA);
      break;
    case OBRA:
      jj_consume_token(OBRA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        token = jj_consume_token(AND);
        break;
      case OR:
        token = jj_consume_token(OR);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(OBRA);
          if(token.image=="and")
          condition.setAndType();
                else condition.setOrType();
          condition.addChildCondition(this.getCondition());
      label_9:
      while (true) {
        jj_consume_token(COMMA);
          condition.addChildCondition(this.getCondition());
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_9;
        }
      }
      jj_consume_token(CBRA);
      jj_consume_token(CBRA);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return condition;}
    throw new Error("Missing return statement in function");
  }

  final private Condition getAndhasCondition() throws ParseException {
  Condition condition = new Condition();
    condition.addChildCondition(this.getHasKnowledgeCondition());
  {if (true) return condition;}
    throw new Error("Missing return statement in function");
  }

  final private Condition getHasKnowledgeCondition() throws ParseException {
  Condition condition = new Condition();
    jj_consume_token(HASKNOWLEDGE);
    jj_consume_token(OBRA);
      condition.addCondition(this.getFunctionSignature());
    jj_consume_token(CBRA);
      {if (true) return condition;}
    throw new Error("Missing return statement in function");
  }

  final private Capability setActionConditions(Capability action) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HASKNOWLEDGE:
      jj_consume_token(HASKNOWLEDGE);
      jj_consume_token(OBRA);
                  action.addCondition(this.getFunctionSignature());
      jj_consume_token(CBRA);
      jj_consume_token(SEMICOLON);
      break;
    case AND:
      jj_consume_token(AND);
      jj_consume_token(OBRA);
      jj_consume_token(HASKNOWLEDGE);
      jj_consume_token(OBRA);

      jj_consume_token(CBRA);
      label_10:
      while (true) {
        jj_consume_token(COMMA);
        jj_consume_token(HASKNOWLEDGE);
        jj_consume_token(OBRA);

        jj_consume_token(CBRA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_10;
        }
      }
      jj_consume_token(CBRA);
      jj_consume_token(SEMICOLON);
      break;
    case NULL:
      jj_consume_token(NULL);
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return action;}
    throw new Error("Missing return statement in function");
  }

  final private KnowledgeCollection getKnowledgeCollection() throws ParseException {
  KnowledgeCollection knowledgeCollection = new KnowledgeCollection();
  Token token;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_11;
      }
      token = jj_consume_token(NAME);
      jj_consume_token(OBRA);
          knowledgeCollection.add(this.getKnowledge(token.image));
      jj_consume_token(CBRA);
      jj_consume_token(SEMICOLON);
    }
    {if (true) return knowledgeCollection;}
    throw new Error("Missing return statement in function");
  }

  final private Knowledge getKnowledge(String knowledgeName) throws ParseException {
  Token token;
  Knowledge knowledge = new Knowledge(knowledgeName);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAME:
      token = jj_consume_token(NAME);
      knowledge.addParameter(token.image);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        token = jj_consume_token(NAME);
      knowledge.addParameter(token.image);
      }
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    {if (true) return knowledge;}
    throw new Error("Missing return statement in function");
  }

  final private Environment addArtifact(Environment env) throws ParseException {
  Token token;
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFINE_ARTIFACT:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_13;
      }
      jj_consume_token(DEFINE_ARTIFACT);
      token = jj_consume_token(NAME);
      Artifact artifact = new Artifact(token.image);
      jj_consume_token(OCBRA);
      artifact.setParent(this.getArtifactParent());
      artifact.setConnections(this.getArtifactConnections());
           env.addArtifact(token.image,artifact);
      jj_consume_token(CCBRA);
    }
    {if (true) return env;}
    throw new Error("Missing return statement in function");
  }

  final private String getArtifactParent() throws ParseException {
  String parent="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARENT:
      jj_consume_token(PARENT);
      jj_consume_token(EQUAL);
      jj_consume_token(OCBRA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
      case NAME:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NULL:
          jj_consume_token(NULL);
          break;
        case NAME:
          token = jj_consume_token(NAME);
            parent = token.image;
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      jj_consume_token(CCBRA);
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
          {if (true) return parent;}
    throw new Error("Missing return statement in function");
  }

  final private ArrayList<String> getArtifactConnections() throws ParseException {
  ArrayList<String>  connections= new ArrayList< String>();
  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONNECTED_TO:
      jj_consume_token(CONNECTED_TO);
      jj_consume_token(EQUAL);
      jj_consume_token(OCBRA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
      case NAME:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NULL:
          jj_consume_token(NULL);
          break;
        case NAME:
          token = jj_consume_token(NAME);
            connections.add(token.image);
          label_14:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[47] = jj_gen;
              break label_14;
            }
            jj_consume_token(COMMA);
            token = jj_consume_token(NAME);
            connections.add(token.image);
          }
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      jj_consume_token(CCBRA);
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
          {if (true) return connections;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public PlaceGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[51];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000000,0x0,0x40000000,0x0,0x0,0x0,0x10000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x100000,0x40400,0x0,0x0,0x0,0x0,0x100,0x200000,0x200000,0x0,0x2000,0x0,0x0,0x0,0x0,0x4000000,0x100000,0x4000000,0x4000000,0xc00000,0x100000,0x40100,0x100000,0x440000,0x0,0x100000,0x0,0x20000000,0x40000,0x40000,0x0,0x100000,0x40000,0x40000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x4000000,0x0,0x2,0x20,0x80,0x0,0x0,0x4,0x8000000,0x8000000,0x40,0x100,0x0,0x1,0x200000,0x0,0x0,0x100,0x400,0x400000,0x2000000,0x0,0x0,0x0,0x2000000,0x1000,0x810800,0x810800,0x2000,0xc000000,0x8000000,0x0,0x8000000,0x8000000,0x0,0x0,0x200,0x0,0x200,0x8000000,0x0,0x8000000,0x0,0x8000000,0x8000000,0x10,0x0,0x8000000,0x8000000,0x8,};
   }

  /** Constructor with InputStream. */
  public PlaceGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PlaceGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PlaceGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PlaceGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PlaceGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PlaceGrammar(PlaceGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PlaceGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 51; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
