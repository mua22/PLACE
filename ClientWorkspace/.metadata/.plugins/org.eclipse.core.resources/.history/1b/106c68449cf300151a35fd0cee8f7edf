/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(PlanStringConverter)package sapa.planStringConverter;

import epclaim.compiler.*;
import epclaim.utils.*;
import java.util.ArrayList;
import epclaim.tasks.*;
import java.io.*;
import epclaim.planner.*;
public class PlanStringConverter{  public static void main(String args []) throws ParseException  {
    String test = "0.0: (Lift hoist1 crate0 pallet1 distributor0) [1.0] 0.0: (Lift hoist0 crate1 pallet0 depot0) [1.0]";
	byte[] bytes = test.getBytes();
	ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
	InputStreamReader isr = new InputStreamReader(bais);    PlanStringConverter parser = new PlanStringConverter(isr);
    PLACEPlan plan = parser.getPlan();
    System.out.println(plan);    }}PARSER_END(PlanStringConverter)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{  < PLAN : "Plan" >| < COST : "cost" >
| < DASH : "-" >| < EXCLAMATION : "!" >
| < COLON: ":" >| < OBRA : "(" >
| < CBRA : ")" >
| < FLOAT: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| <NAME :["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* > }TOKEN :{  < CONSTANT : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >}public PLACEPlan getPlan() :{
  FunctionSignatureCollection collection = new FunctionSignatureCollection();
  Token token;
  Token floatToken;
  float cost=0;}

{ 	  	
  	(
		{
		  FunctionSignature fs = new FunctionSignature();		}
		(floatToken=< FLOAT>)		
  	
	{
	  collection.add(fs);	}
  	)+ 
	
	{
	  return new PLACEPlan(collection,cost);	}}