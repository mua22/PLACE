/**
 * epclaim.compiler
 * 
 */
package epclaim.compiler;

import java.util.ArrayList;

/**
 * @author Usman
 * Creates a Tree Like Structure for nested Conditions. 
 *
 */
public class Condition {
	
	/*
	 * type 
	 * o for none
	 * 1 for and
	 * 2 for or
	 */
	private int type;
	private ArrayList<Condition> childConditionNodes;
	private ArrayList<FunctionSignature> conditions;
	public Condition() {
		super();
		this.type = 0;
		this.childConditionNodes = new ArrayList<Condition>();
		this.conditions = new ArrayList<FunctionSignature>();
	}
	
	public String toString(){
		String str = "";
		if(this.type==0)
		{
			for(FunctionSignature con:this.conditions){
				str+=con;
			}
		}else {
			
		}
		return str;
	}

	public boolean addCondition(FunctionSignature e) {
		return conditions.add(e);
	}

	public boolean addChildCondition(Condition e) {
		return childConditionNodes.add(e);
	}
	
}
